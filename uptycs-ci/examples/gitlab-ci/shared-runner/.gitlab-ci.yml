container_scanning:
  stage: test
  image: docker
  services:
    - docker:dind
  variables:
    # We don't need to clone the source code since we just scan a specified
    # image id and don't require access to the source code.
    GIT_STRATEGY: none
    # UPTYCS_CI_SECRET should be stored as a variable or in a connected
    # vault instance.
    UPTYCS_CI_SECRET: $UPTYCS_CI_SECRET
  dependencies:
    - docker_build
  script:
  # Build an image to scan
  - docker build -t my-image:latest --iidfile=image_id.out -f Dockerfile .
  # Create an env file containing all of the environment variables from the
  # runner that we want available during the scan.
  - env | grep 'UPTYCS_\|CI_\|GIT\|OSQUERY_' > .uptycs_env
  # Scan an image that we expect to successfully pass the scan.
  - >-
    docker run --rm --privileged
    --pid host
    --net host
    --restart no
    --env-file .uptycs_env
    --workdir $CI_PROJECT_DIR
    --volume $CI_PROJECT_DIR:$CI_PROJECT_DIR
    --volume /var/run/docker.sock:/var/run/docker.sock:ro
    uptycs/uptycs-ci:5.3.0.11-Uptycs-202208291926-x86_64-2-delete-2
    --image-id="$(cat image_id.out)"
    --osquery-flags="$(cat $OSQUERY_FLAGS)"
    --ci-runner-type gitlab
    --uptycs-secret "$UPTYCS_CI_SECRET"
    --fatal-cvss-score 8.5
    --verbose
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
    - gl-container-scanning-report.json
