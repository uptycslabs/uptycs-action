---
name: Uptycs Image Scanner
description: >
  Scans containers for vulnerabilities, secrets, malware, and potentially
  dangerous image configurations.
author: Uptycs
inputs:
  #############################################################################
  # Required Inputs
  #############################################################################
  credentials:
    description: Tenant-specific credentials for authenticating to uptycs
    required: true
  image:
    description: The name or ID of the docker image to scan
    required: true
  #############################################################################
  # Optional inputs
  #############################################################################
  fatal-cvss-score:
    description: >
      The CVSS score at which a detected vulnerability should fail the build
    required: false
    default: "-1"
  fatal-vulnerability-severity:
    description: >
      Maximum allowable severity for a detected vulnerability.
    required: false
    default: "unset"
  ignore-no-exploit:
    description: >
      Ignore any vulnerabilities for which no known exploits are available.
    required: false
  ignore-no-fix:
    description: Only report vulnerabilities for which fixes are available.
    required: false
  output-format:
    description: >
      The format type to use when writing reports to disk. Valid values are
      'json' and 'csv'.
    required: false
  output-name:
    description: >
      A unique ID that can be used to organize output files from multiple
      scans. Defaults to the id of the scanned image.
    required: false
  policy-name:
    description: >
      The name of the image assurance policy to apply to images scanned in
      this workflow.
    required: false
  scanner-image:
    description: The uptycs-ci image to use when executing the scan.
    required: false
    default: "uptycs/uptycs-ci:3.6.8"
  uptycs-ca-cert:
    description: The path to a custom CA Cert to use for connecting to uptycs.
    required: false
    default: ""
  verbose:
    description: Include verbose output.
    required: false
  version:
    description: The version of uptycs-cli to use when scanning.
    required: false
    default: 3.6.8
  install_dir:
    description: The directory to copy the uptycs-cli binary
    required: false
    default: /usr/local/bin/
  exit-on-error:
    description: Fail build on error.
    required: false
runs:
  using: "composite"
  steps:
    # Install uptycs-cli for the current architecture.
    - shell: bash
      run: |
        DOWNLOAD_DIR=$(mktemp -d)
        ARCH=$(uname -m)

        if [ "${ARCH}" = "aarch64" ]; then
          ARCH="arm64";
        elif [ "${ARCH}" = "x86_64" ]; then
          ARCH="amd64";
        fi

        BINARY_NAME="uptycs-cli-${{ inputs['version'] }}-linux-${ARCH}"
        INSTALL_DIR="${{ inputs['install_dir'] }}"

        # Remove trailing slash if present
        INSTALL_DIR="${INSTALL_DIR%/}"

        echo "downloading https://downloads.uptycs.io/uptycs-cli/" \
             "${BINARY_NAME}.tar.gz"
        echo "Install directory: ${INSTALL_DIR}"

        # Ensure install directory exists and is writable
        mkdir -p "${INSTALL_DIR}"
        # Test if directory is writable
        if [ ! -w "${INSTALL_DIR}" ]; then
          echo "Error: Install directory ${INSTALL_DIR} is not writable"
          echo "Please ensure the directory has write permissions" \
               "or choose a different install_dir"
          exit 1
        fi

        curl -L -f -o "${DOWNLOAD_DIR}/${BINARY_NAME}.tar.gz" \
             "https://downloads.uptycs.io/uptycs-cli/${BINARY_NAME}.tar.gz"
        tar -xf "${DOWNLOAD_DIR}/${BINARY_NAME}.tar.gz" \
            --directory "${DOWNLOAD_DIR}/"
        # Copy binary to install directory
        cp "${DOWNLOAD_DIR}/bin/uptycs-cli" "${INSTALL_DIR}/uptycs-cli"
        chmod +x "${INSTALL_DIR}/uptycs-cli"

        echo "uptycs-cli installed to ${INSTALL_DIR}/uptycs-cli"
    - shell: bash
      run: |
        CREDENTIALS='${{ inputs['credentials'] }}'
        uptycs_cli_args=("--credentials=${CREDENTIALS}" \
                         "--image=${{ inputs['image'] }}")

        # fatal-cvss-score
        if [ "${{ inputs['fatal-cvss-score'] }}" != "-1" ]; then
            uptycs_cli_args+=("--fatal-cvss-score=${{ inputs['fatal-cvss-score'] }}")
        fi

        # fatal-vulnerability-seveirty
        if [ "${{ inputs['fatal-vulnerability-severity'] }}" != "unset" ]; then
            uptycs_cli_args+=("--fatal-vulnerability-severity=" \
                              "${{ inputs['fatal-vulnerability-severity'] }}")
        fi

        # ignore-no-exploit
        if [ "${{ inputs['ignore-no-exploit'] }}" = "true" ]; then
            uptycs_cli_args+=("--ignore-no-exploit");
        fi

        # ignore-no-fix
        if [ "${{ inputs['ignore-no-fix'] }}" = "true" ]; then
            uptycs_cli_args+=("--ignore-no-fix");
        fi

        # output-format
        if [ -n "${{ inputs['output-format'] }}" ]; then
            uptycs_cli_args+=("--output-format=${{ inputs['output-format'] }}");
        fi

        # output-name
        if [ -n "${{ inputs['output-name'] }}" ]; then
            uptycs_cli_args+=("--output-name=${{ inputs['output-name'] }}");
        fi

        # policy-name
        if [ -n "${{ inputs['policy-name'] }}" ]; then
            uptycs_cli_args+=("--policy-name=${{ inputs['policy-name'] }}");
        fi

        # scanner-image
        if [ -n "${{ inputs['scanner-image'] }}" ]; then
            uptycs_cli_args+=("--scanner-image=${{ inputs['scanner-image'] }}");
        fi

        # uptycs-ca-cert
        if [ -n "${{ inputs['uptycs-ca-cert'] }}" ]; then
            uptycs_cli_args+=("--uptycs-ca-cert=${{ inputs['uptycs-ca-cert'] }}");
        fi

        # verbose
        if [ "${{ inputs['verbose'] }}" = "true" ]; then
            uptycs_cli_args+=("--verbose");
        fi

        # exit-on-error
        if [ "${{ inputs['exit-on-error'] }}" = "true" ]; then
            uptycs_cli_args+=("--exit-on-error");
        fi

        # Set up install directory path (remove trailing slash if present)
        INSTALL_DIR="${{ inputs['install_dir'] }}"
        INSTALL_DIR="${INSTALL_DIR%/}"

        # Now execute the scan, using the args that we built up above.
        "${INSTALL_DIR}/uptycs-cli" images scan "${uptycs_cli_args[@]}"
